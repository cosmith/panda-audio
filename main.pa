class BufferLoader:
    def BufferLoader(context, urlList, callback):
        self.context = context
        self.urlList = urlList
        self.onload = callback
        self.bufferList = new Array()
        self.loadCount = 0
    end

    def loadBuffer(url, index):
        # Load buffer asynchronously
        var request = new XMLHttpRequest()
        request.open("GET", url, true)
        request.responseType = "arraybuffer"

        request.onload = def ():
            # Asynchronously decode the audio file data in request.response
            self.context.decodeAudioData(
                request.response,
                def (buffer):
                    if not buffer:
                        alert("error decoding file data: " + url)
                        return
                    end
                    self.bufferList[index] = buffer
                    
                    self.loadCount += 1
                    console.debug("Loaded", url, self.loadCount, "/", self.urlList.length)
                    if self.loadCount == self.urlList.length:
                        self.onload(self.bufferList)
                    end
                end,
                def (error):
                    console.error("decodeAudioData error", error)
                end
            )
        end

        request.onerror = def ():
            alert("BufferLoader: XHR error")
        end

        request.send()
    end

    def load():
        for i in [0 .. self.urlList.length-1]:
            self.loadBuffer(self.urlList[i], i)
        end
    end
end

var context = 0
var source = 0

def randomTime():
    var time = Math.random() * 500000
    time = Math.floor(time / 100) * 100
    return time
end

def playSound(buffer, time):
  var source = context.createBufferSource()
  source.buffer = buffer
  source.connect(context.destination)
  source.start(time)
end

def finishedLoading(bufferList):
    console.log("Finished loading")
    # Create two sources and play them both together.

    for buffer in bufferList:
        var play = def (b):
            return def ():
                playSound(b, 0)
            end
        end
        for i in [0..100]:
            setTimeout(play(buffer), randomTime())
        end
    end
end

def init():
    # Fix up prefixing
    window.AudioContext = window.AudioContext or window.webkitAudioContext
    context = new window.AudioContext()
    var files = []
    for i in [1..16]:
        files.push("sounds/pianobell_" + i + ".ogg")
        files.push("sounds/woody_" + i + ".ogg")
    end
    var bufferLoader = new BufferLoader(context, files, finishedLoading)

    bufferLoader.load()
end

window.onload = init
var bufferLoader = 0
